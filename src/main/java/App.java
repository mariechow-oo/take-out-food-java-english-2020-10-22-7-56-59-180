import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here

        // Prepare data
        Item[] menuItems = {
            new Item("ITEM0001" , "Braised chicken", 18),
            new Item("ITEM0013" , "Chinese hamburger", 6),
            new Item("ITEM0022" , "Cold noodles", 8)
        };
        SalesPromotion deductSale = new SalesPromotion("deduct", "Deduct 6 yuan when the order reaches 30 yuan, saving 6 yuan\n", Arrays.asList("ITEM0001", "ITEM0013", "ITEM0022"));
        SalesPromotion halfSale = new SalesPromotion("half", "Half price for certain dishes (Braised chicken，Cold noodles)，saving ", Arrays.asList("ITEM0001", "ITEM0022"));

        // Get items from input
        HashMap<String, String> orderItems = new HashMap<String, String>();
        for (String input : inputs) {
            String[] id_quantity = input.split(" x ");
            orderItems.put(id_quantity[0], id_quantity[1]);
        }

        // Calculate totals
        String str = "============= Order details =============\n";
        int total = 0, deductedTotal = 0, halvedTotal = 0;

        for (Item menuI : menuItems) {
            for (Map.Entry<String, String> orderI : orderItems.entrySet()) {
                String id = orderI.getKey(), quantity = orderI.getValue();
                if (menuI.getId().equals(id)) {
                    int itemPrice = (int) (Double.parseDouble(quantity) * menuI.getPrice());
                    str += menuI.getName() + " x " + quantity + " = " + itemPrice + " yuan\n";

                    total += itemPrice;
                    halvedTotal += halfSale.getRelatedItems().contains(id) ? itemPrice/2 : itemPrice;
                    break;
                }
            }
        };
        str += "-----------------------------------\n";

        // Determine lowest
        deductedTotal = total-6;
        if (total >= 30 && deductedTotal <= halvedTotal) {
            str += "Promotion used:\n" + deductSale.getDisplayName() + "-----------------------------------\n";
            total = deductedTotal;
        } else if (halvedTotal < total) {
            str += "Promotion used:\n" + halfSale.getDisplayName() + (total-halvedTotal) + " yuan\n" + "-----------------------------------\n";
            total = halvedTotal;
        }
        str += "Total：" + total + " yuan\n" + "===================================";
        return str;
    }
}
